[{"content": "# OpenSSL C Snippets\n\n\n\n# Save X509 certificate\n## as DER\n\n    int i2d_X509_fp(FILE *fp, X509 *x);\n\n## as PEM\n\nhttps://stackoverflow.com/a/6088446/7486276\n\n## Reference\nhttps://www.openssl.org/docs/manmaster/man3/d2i_X509.html\n", "tags": ["c", "openssl", "crypto"], "title": "OpenSSL C Snippets", "isTrashed": false, "isStarred": false, "folder": "ea00197dbcec7d72472d", "updatedAt": "2018-04-18T10:24:11.830Z", "type": "MARKDOWN_NOTE", "createdAt": "2018-04-18T09:56:40.693Z"}, {"snippets": [{"content": "<html>\n<body>\n<h1 id='hello'>Enjoy Boostnote!</h1>\n</body>\n</html>", "name": "example.html", "mode": "html"}, {"content": "var boostnote = document.getElementById('enjoy').innerHTML\n\nconsole.log(boostnote)", "name": "example.js", "mode": "javascript"}], "description": "Snippet note example\nYou can store a series of snippets as a single note, like Gist.", "title": "Snippet note example", "isTrashed": true, "isStarred": false, "folder": "5e3baaa059a9f36e75c4", "updatedAt": "2018-04-18T07:35:10.504Z", "type": "SNIPPET_NOTE", "createdAt": "2018-04-18T07:33:03.981Z", "tags": []}, {"content": "# Welcome to Boostnote!\n## Click here to edit markdown :wave:\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/L0qNPLsvmyM\" frameborder=\"0\" allowfullscreen></iframe>\n\n## Docs :memo:\n- [Boostnote | Boost your happiness, productivity and creativity.](https://hackernoon.com/boostnote-boost-your-happiness-productivity-and-creativity-315034efeebe)\n- [Cloud Syncing & Backups](https://github.com/BoostIO/Boostnote/wiki/Cloud-Syncing-and-Backup)\n- [How to sync your data across Desktop and Mobile apps](https://github.com/BoostIO/Boostnote/wiki/Sync-Data-Across-Desktop-and-Mobile-apps)\n- [Convert data from **Evernote** to Boostnote.](https://github.com/BoostIO/Boostnote/wiki/Evernote)\n- [Keyboard Shortcuts](https://github.com/BoostIO/Boostnote/wiki/Keyboard-Shortcuts)\n- [Keymaps in Editor mode](https://github.com/BoostIO/Boostnote/wiki/Keymaps-in-Editor-mode)\n- [How to set syntax highlight in Snippet note](https://github.com/BoostIO/Boostnote/wiki/Syntax-Highlighting)\n\n---\n\n## Article Archive :books:\n- [Reddit English](http://bit.ly/2mOJPu7)\n- [Reddit Spanish](https://www.reddit.com/r/boostnote_es/)\n- [Reddit Chinese](https://www.reddit.com/r/boostnote_cn/)\n- [Reddit Japanese](https://www.reddit.com/r/boostnote_jp/)\n\n---\n\n## Community :beers:\n- [GitHub](http://bit.ly/2AWWzkD)\n- [Twitter](http://bit.ly/2z8BUJZ)\n- [Facebook Group](http://bit.ly/2jcca8t)", "tags": [], "title": "Welcome to Boostnote!", "isTrashed": true, "isStarred": false, "folder": "5e3baaa059a9f36e75c4", "updatedAt": "2018-04-18T07:35:08.118Z", "type": "MARKDOWN_NOTE", "createdAt": "2018-04-18T07:33:04.030Z"}, {"content": "# Python GTK\n\n# General Development\n\n  * https://python-gtk-3-tutorial.readthedocs.io/en/latest/\n  * https://glade.gnome.org/\n  * https://wiki.gnome.org/action/show/Apps/Glade/Tutorials\n\n# Using custom theme\n\n  * https://stackoverflow.com/a/43425471/7486276\n\n\n# Themes\n\n  * https://github.com/nana-4/materia-theme\n  \n", "tags": ["python", "gtk", "gui"], "title": "Python GTK", "isTrashed": false, "isStarred": false, "folder": "1f4ca2e02de793f62302", "updatedAt": "2018-04-18T09:09:12.652Z", "type": "MARKDOWN_NOTE", "createdAt": "2018-04-18T09:08:31.747Z"}, {"content": "# Sphinx documentation generator setup\n\nsource: [An idiot\u2019s guide to Python documentation with Sphinx and ReadTheDocs \u2013 Samposium](https://samnicholls.net/2016/06/15/how-to-sphinx-readthedocs/)\n\n## Setup\n\n    pip install Sphinx\n\n**Setup project directory:**\n\n    cd your-awesome-project\n    mkdir docs\n    cd docs/\n    sphinx-quickstart\n\n**Enable the following modules:**\n\n  * **autodoc** for automatic generation of module documentation\n  * **viewcode** for enabling code links in the documentation\n\n**Setup module documentation:**\n\n    cd docs/\n    sphinx-apidoc -o source/ ../<package>\n    \nopen conf.py and uncomment the following line:\n\n    # If extensions (or modules to document with autodoc) are in another directory,\n    # add these directories to sys.path here. If the directory is relative to the\n    # documentation root, use os.path.abspath to make it absolute, like shown here.\n    sys.path.insert(0, os.path.abspath('.'))\n\nif it does NOT work you may instead use the following alternative in conf.py:\n\n    sys.path.insert(0, os.path.abspath('../'))\n    \nEnable Google style python docstrings with napoleon in conf.py:\n\n    # Add napoleon to the extensions list\n    extensions = ['sphinx.ext.napoleon']\n\n    # Napoleon settings\n    napoleon_google_docstring = True\n    napoleon_numpy_docstring = False\n    \n**Add your readme:**\nto docs/index.rst:\n\n    [...]\n    .. toctree::\n       :maxdepth: 2\n\n       readme\n    [...]\n\ncreate docs/readme.rst as a \"symlink\" with the following content:\n\n    .. include:: ../README.rst\n    \nCreate your readme.rst file in the root of your project.\n\n## Additional ressources\n\n[Google Python Style Guide](http://google.github.io/styleguide/pyguide.html)\n[Example Google Style Python Docstrings \u2014 Sphinx 1.7.3+ documentation](http://www.sphinx-doc.org/en/stable/ext/example_google.html#example-google)\n[sphinx.ext.napoleon \u2013 Support for NumPy and Google style docstrings \u2014 Sphinx 1.7.3+ documentation](http://www.sphinx-doc.org/en/stable/ext/napoleon.html#getting-started)", "tags": ["python", "sphinx", "documentation", "tutorial"], "title": "Sphinx documentation generator setup", "isTrashed": false, "isStarred": false, "folder": "1f4ca2e02de793f62302", "updatedAt": "2018-05-18T07:22:29.752Z", "type": "MARKDOWN_NOTE", "createdAt": "2018-05-18T07:00:33.892Z"}, {"content": "# Useful Laravel Links\n\n## Security Checks\n\n[GitHub - sensiolabs/security-checker: PHP frontend for security.sensiolabs.org](https://github.com/sensiolabs/security-checker)\n\n[How to Check for Known Security Vulnerabilities in Your Dependencies (Symfony Docs)](https://symfony.com/doc/current/security/security_checker.html)\n\n## CI & CD\n\n[Test and deploy Laravel applications with GitLab CI/CD and Envoy | GitLab](https://docs.gitlab.com/ee/ci/examples/laravel_with_gitlab_and_envoy/)\n\n[Laravel Continuous Deployment on VPS over Github](http://tornike.me/notes/laravel-build-and-deployment-on-vps-over-github)\n\n", "tags": [], "title": "Useful Laravel Links", "isTrashed": false, "isStarred": false, "folder": "e471bb6f54c0f12cb405", "updatedAt": "2018-05-16T06:51:52.524Z", "type": "MARKDOWN_NOTE", "createdAt": "2018-05-16T06:47:29.730Z"}, {"content": "# Theme\nhttps://github.com/jekyll/minima\n\n\n# Adding categories to a theme\n\nhttps://blog.webjeda.com/jekyll-categories/\n\n# Syntax highlighting\n\nhttps://github.com/jwarby/jekyll-pygments-themes", "tags": ["tutorial", "jekyll", "web"], "title": "Theme", "isTrashed": false, "isStarred": false, "folder": "aa4000d029eb34deae54", "updatedAt": "2018-04-18T09:13:27.460Z", "type": "MARKDOWN_NOTE", "createdAt": "2018-04-18T09:13:07.314Z"}, {"content": "# GnuPG Ressources\n\nLinks for parsing gnupg output:\n\n  * https://git.gnupg.org/cgi-bin/gitweb.cgi?p=gnupg.git;a=blob_plain;f=doc/DETAILS", "tags": ["gpg", "OpenPGP", "Specification"], "title": "GnuPG Ressources", "isTrashed": false, "isStarred": false, "folder": "eaf2f7e1fc238535cd80", "updatedAt": "2018-04-18T09:22:32.719Z", "type": "MARKDOWN_NOTE", "createdAt": "2018-04-18T09:21:49.343Z"}, {"content": "# Python PDF search\n\n## Add text layer if necessary\n\n    ocrmypdf --rotate-pages myfile.pdf myfile.pdf\n\n## search in PDF\n\n    pdfgrep -nHri search_string_hallo ./\n\n## parse output\n    \n    filename:linenumber:excerpt\n  \n  ", "tags": ["python", "pdf", "search"], "title": "Python PDF search", "isTrashed": false, "isStarred": false, "folder": "1f4ca2e02de793f62302", "updatedAt": "2018-05-02T08:38:31.259Z", "type": "MARKDOWN_NOTE", "createdAt": "2018-05-02T08:25:38.382Z"}, {"content": "# Mono Decentralization Ressources\n\n# Anonymity - tor\n\n  * DotNetTor: https://github.com/nopara73/DotNetTor\n  * https://github.com/postworthy/SocksWebProxy\n  * https://github.com/joelverhagen/TorSharp\n\n# Decentralization\n## IPFS:\n\n  * https://github.com/richardschneider/net-ipfs-api\n    \n## Torrent\n\n### Libraries\n\n  * https://github.com/Eskat0n/OctoTorrent\n  * https://github.com/mono/monotorrent\n\n### BEncoding\n\n  * https://github.com/Krusen/BencodeNET\n  \n## Crypto\n\n### Libraries\n\n  * https://github.com/CodesInChaos/Chaos.NaCl\n  * https://github.com/langboost/libaxolotl-uwp\n\n\n#### Keepass Access\n  * https://github.com/leorzz/psKeepPass\n  * http://it-by-doing.blogspot.de/2014/10/accessing-keepass-with-powershell.html\n\n#### SQLCipher\n  * https://github.com/ericsink/SQLitePCL.raw/wiki/How-to-use-SQLCipher-with-SQLite-net\n  * **Usage:** https://github.com/ericsink/SQLitePCL.raw/issues/147\n    * https://github.com/praeclarum/sqlite-net\n    * https://github.com/ericsink/SQLitePCL.raw\n\n### Examples\n\n  * https://github.com/sledwith/PGP-Decryption-With-C-Sharp\n  * https://github.com/langboost/axolotl-sample-client\n\n\n## Decentralized Networks/Applications\n\n  * https://github.com/HelloZeroNet/ZeroNet\n  * https://github.com/blockstack/blockstack\n  * IPFS\n  \n# Attack vectors and protection\n  * IPFS replay attack\n    * https://github.com/ipfs/faq/issues/70\n    * https://github.com/ipfs/faq/issues/70#issuecomment-153801133", "tags": ["mono", "decentralization", "ressources", "crypto", "tor", "torrent"], "title": "Mono Decentralization Ressources", "isTrashed": false, "isStarred": false, "folder": "6bff58b74433e038c223", "updatedAt": "2018-04-18T10:24:35.828Z", "type": "MARKDOWN_NOTE", "createdAt": "2018-04-18T09:46:39.776Z"}, {"content": "# KeepassXC snippets\n\n## Open database\n  * https://gist.github.com/dAnjou/b99f55de34b90246f381e71e3c8f9262\n  * https://stackoverflow.com/questions/2613161/how-to-write-to-the-stdin-of-another-app", "tags": ["keepassxc", "integration"], "title": "KeepassXC snippets", "isTrashed": false, "isStarred": false, "folder": "793521cf8d1bf04392e6", "updatedAt": "2018-04-18T09:35:48.752Z", "type": "MARKDOWN_NOTE", "createdAt": "2018-04-18T09:34:43.512Z"}, {"content": "# Torify Python application \n\n[Tor via Python - can the real IP address leak? - Information Security Stack Exchange](https://security.stackexchange.com/a/131154/137708)", "tags": ["python", "tor"], "title": "Torify Python application", "isTrashed": false, "isStarred": false, "folder": "1f4ca2e02de793f62302", "updatedAt": "2018-05-09T10:01:35.422Z", "type": "MARKDOWN_NOTE", "createdAt": "2018-05-09T10:00:59.086Z"}, {"content": "# Server Hardening Links\n\n## First 5 minutes scripts\n\n[Ansible Galaxy | geerlingguy.security](https://galaxy.ansible.com/geerlingguy/security/)\n\n\n\n## Hardening\n[Hardening Framework](http://dev-sec.io/)\n\n## Server Security Testing\n\n[InSpec - Audit and Automated Testing Framework](https://www.inspec.io/)", "tags": ["sysadmin", "devops", "infrastructure", "tutorial"], "title": "Server Hardening Links", "isTrashed": false, "isStarred": false, "folder": "011825cbb91c6d9c89ea", "updatedAt": "2018-04-23T07:19:07.609Z", "type": "MARKDOWN_NOTE", "createdAt": "2018-04-23T07:16:39.058Z"}, {"content": "# Vultrack\n\n    import json\n    import urllib.request\n    #from requests import get\n    from zipfile import ZipFile\n    import re\n\n    CVE_URL = 'https://nvd.nist.gov/feeds/json/cve/1.0/nvdcve-1.0-2018.json.zip'\n\n    def get_cves():\n        urllib.request.urlretrieve(CVE_URL, \"2018.zip\")\n        with ZipFile('2018.zip') as myzip:\n            myzip.extractall()\n        cve_json = \"\"\n        with open('nvdcve-1.0-2018.json', 'r') as myfile:\n            data=myfile.read()\n            print(data)\n\n    def search(product_name):\n        # search in vendor_name, product_name, description\n        pass\n\n\n    get_cves()\n", "tags": ["python", "cve", "itsec", "pentest"], "title": "Vultrack", "isTrashed": false, "isStarred": false, "folder": "1f4ca2e02de793f62302", "updatedAt": "2018-05-02T09:19:44.143Z", "type": "MARKDOWN_NOTE", "createdAt": "2018-05-02T09:19:05.242Z"}, {"content": "# WebKeyDirectory\n\n**Specification:** https://tools.ietf.org/html/draft-koch-openpgp-webkey-service-05\n\n# Routes\n\n## /.well-known/openpgpkey/submission-address\n**Returns:** Submission email address\n\n**Example:**\n\n    key-submission-example.org@directory.example.org\n\n## /.well-known/openpgpkey/policy\n\n\n# WKD-Bot\n## On received email\n### Check if submission with key\n  * check if the key was already sent\n  * check if the email-address of the key matches the server\n  * check if sender's email-address matches the email-address of the key\n  * Create encrypted email with the following contents:\n    * nonce\n    * key fingerprint\n  * send email\n  * save submission info in database\n\n### Check if submission confirmation\n  * if email is encrypt: decrypt\n  * check if nonce matches pending confirmation in database\n  * check if email-address matches confirmation email-address in database\n  * for ASCII-characters in local-part of address: tolower()\n  * Create SHA1-hash of local part of address\n  *  Z-Base-32-encode SHA1-hash\n  * publish key to hu-directory\n\n## Configuration values\n  * web-dir-path\n  * submission-email-address\n  * policy\n  * registration-type(s)\n  * working-dir (for gnupg-keyring and temporary keyrings)\n  * database configuration\n  * check-interval\n\n  \n", "tags": ["WKD", "OpenPGP", "Specification", "server", "infrastructure"], "title": "WebKeyDirectory", "isTrashed": false, "isStarred": false, "folder": "eaf2f7e1fc238535cd80", "updatedAt": "2018-04-18T09:01:14.317Z", "type": "MARKDOWN_NOTE", "createdAt": "2018-04-18T09:00:13.190Z"}, {"content": "# i3 Window Manager Cheat Sheet\n\n`$mod` refers to the modifier key (alt by default)\n\n## General\n* `startx i3` start i3 from command line\n* `$mod+<Enter>` open a terminal\n* `$mod+d` open dmenu (text based program launcher)\n* `$mod+r` resize mode (<Esc> or <Enter> to leave resize mode)\n* `$mod+shift+e` exit i3\n* `$mod+shift+r` restart i3 in place\n* `$mod+shift+c` reload config file\n* `$mod+shift+q` kill window (does normal close if application supports it)\n\n## Windows\n* `$mod+w` tabbed layout\n* `$mod+e` vertical and horizontal layout (switches to and between them)\n* `$mod+s` stacked layout\n* `$mod+f` fullscreen\n\n## Moving Windows\n* `$mod+shift+<direction key>` Move window in _direction_ (depends on direction keys settings)", "tags": ["i3", "cheatsheet"], "title": "i3 Window Manager Cheat Sheet", "isTrashed": false, "isStarred": false, "folder": "00f84f63205d821f8357", "updatedAt": "2018-04-27T09:21:15.601Z", "type": "MARKDOWN_NOTE", "createdAt": "2018-04-27T09:21:01.499Z"}, {"snippets": [{"content": "var MWTool = {\n\t\tclickHandlerRegEx: new RegExp(\"^chrome://addon/content/\"),\n\t\topenTab: function(chromePath) {\n\t\t\tComponents.classes[\"@mozilla.org/appshell/window-mediator;1\"].getService(Components.interfaces.nsIWindowMediator).getMostRecentWindow(\"mail:3pane\").document.getElementById(\"tabmail\").openTab(\"chromeTab\", {chromePage: chromePath, clickHandler: \"specialTabs.siteClickHandler(event, MWTool.clickHandlerRegEx);\"});\n\t\t}\n};\n\nvar addon = (function () {\n\n\tvar { classes: Cc, interfaces: Ci, utils: Cu } = Components;\n\tvar Application = Cc[\"@mozilla.org/steel/application;1\"].getService(Ci.steelIApplication);\n\n\tCu.import('resource://gre/modules/Services.jsm');\n\tCu.import(\"resource://gre/modules/NetUtil.jsm\");\n\tCu.import(\"resource://gre/modules/ctypes.jsm\");\n\n\twindow.addEventListener(\"load\", function () {\n\t\t//TODO: next line necessary?\n\t\twindow.MWTool = MWTool;\n\t\tdocument.getElementById(\"btn-addon\").onclick = function () {\n\t\t\tMWTool.openTab(\"chrome://addon/content/index.html\");\n\t\t};\n\t\tconsole.log(\"added event listener\");\n\t});\n\t//window.addEventListener(\"unload\", unload);\n\tApplication.console.log('Finished setup!');\n\n} ());", "name": "overlay.js", "mode": "JavaScript"}, {"content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE overlay >\n<overlay id = \"mainwindow-overlay\" xmlns=\"http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul\">\n\t<stringbundleset id=\"stringbundleset\">\n\t\t<stringbundle id=\"stringBundle\" src=\"chrome://addon/locale/addon.properties\"/>\n\t</stringbundleset>\n\t<commandset id=\"messengerCommands\">\n\t\t<commandset id=\"addon-messengerCmds\" oncommandupdate=\"addon.update()\">\n\t\t\t<command id=\"addon-onButtonClick\" oncommand=\"addon.onButtonCommand()\"/>\n\t\t</commandset>\n\t</commandset>\n\t<toolbar id=\"mail-bar3\">\n\t\t<toolbarbutton id=\"btn-addon\"\n\t\t\timage=\"chrome://addon/skin/btn-icon.png\"\n\t\t\tcommand=\"onButtonClick\" />\n\t\t<toolbarspacer id=\"addon-spacer\" width=\"40\"/>\n    <!-- this creates an hidden iframe for background jobs at startup -->\n\t\t<iframe type=\"chrome\" src=\"chrome://addon/content/ui/background.html\" id=\"background-iframe\" width=\"0\" height=\"0\" style=\"width:0;height:0;border: 0;border: none; visibility: hidden; display: none;\"/>\n\t</toolbar>\n\n\t<script type=\"application/x-javascript\" src=\"chrome://addon/content/js/overlay.js\"/>\n</overlay>", "name": "overlay.xul", "mode": "XML"}], "description": "Open Tab in TB & add background script and own html ", "title": "Open Tab in TB & add background script and own html", "isTrashed": false, "isStarred": false, "folder": "ce1d232699b99dfbebfb", "updatedAt": "2018-04-18T09:28:42.606Z", "type": "SNIPPET_NOTE", "createdAt": "2018-04-18T09:26:59.759Z", "tags": ["TB", "Tab"]}, {"content": "# OpenLDAP TLS configuration with self-signed certificate\n\n  * https://www.server-world.info/en/note?os=Debian_8&p=ssl\n  * https://www.server-world.info/en/note?os=Debian_8&p=openldap&f=4\n  * https://dokuwiki.nausch.org/doku.php/centos:ldap:install\n  * https://dokuwiki.nausch.org/doku.php/centos:ldap:ldaps\n  * https://www.digitalocean.com/community/tutorials/how-to-encrypt-openldap-connections-using-starttls\n  \nClient setup:\n\n  * https://serverfault.com/questions/653321/unable-to-connect-to-server-via-ldaps\n  * https://debianforum.de/forum/viewtopic.php?t=151443", "tags": ["openldap", "tls", "infrastructure", "sysadmin", "tutorial"], "title": "OpenLDAP TLS configuration with self-signed certificate", "isTrashed": false, "isStarred": false, "folder": "011825cbb91c6d9c89ea", "updatedAt": "2018-04-18T09:12:49.613Z", "type": "MARKDOWN_NOTE", "createdAt": "2018-04-18T09:10:51.154Z"}, {"content": "# Manual WKD setup\n\nsource: [Setting up WKD for self-hosted automatic key discovery \u00b7 GitHub](https://gist.github.com/kafene/0a6e259996862d35845784e6e5dbfc79)\n\nI just got this working so I figured I'd share what I found, since there's hardly any information about this anywhere online except an RFC, the GPG mailing list and [one tutorial from the GnuPG blog](https://gnupg.org/blog/20161027-hosting-a-web-key-directory.html).\n\nYou can use automatic key discovery with WKD (Web key directory) to make it easy for users to import your key, in GPG since version 2.1.12. Since this feature is fairly new, it isn't yet available in the current LTS release of Ubuntu (16.04; xenial), however it is available in Debian stable (stretch).\n\nI couldn't add a DNS CERT or DANE / OPENPGPKEY record through my email service (which also hosts my nameservers). I tried making the PKA record - a `foo._pka.example.com` TXT record but GPG doesn't seem to recognize it and fails; I'm still investigating why.\n\nSo the last option for self-hosted auto-discovery was WKD.\n\nFirst thing I had to do was add an email address to my key. My primary UID is just my name so the key represents my identity rather than any particular email address. This was easy enough:\n\n    $ gpg --edit-key 0xDEADBEEFCAFEBABE\n    gpg> adduid\n    # follow the prompts\n    gpg> save\n\nI used this to configure a sub-identity using my domain name as the \"real name\" and an email address (`foo@example.com`). I suppose most here will already have an email address associated with their uid, or else be familiar with the process of editing keys.\n\nThen I created a directory on my server:\n\n    $ ssh example.com\n    > mkdir -p /var/www/.well-known/openpgpkey/hu\n\nThe file you'll put inside this directory needs to be named the same as the WKD hash for your key, to get that run:\n\n    gpg --with-wkd-hash --fingerprint foo@example.com\n\nBelow each `uid` line with an email address, you should see 32 random looking characters @yourdomain.tld, for example:\n\n    pub   2048R/0xDEADBEEFCAFEBABE 2015-01-25 [C] [expires: 2020-01-25]\n          Key fingerprint = ....\n    uid                   [ultimate] Your Name <foo@example.com>\n                          sc8wrug2g3mz8m8jz4tjrlgweilkgcba@example.com\n\nSo the WKD hash in this example is `sc8wrug2g3mz8m8jz4tjrlgweilkgcba`.\nLet's create the file that we'll be uploading:\n\n    gpg --no-armor --export foo@example.com > sc8wrug2g3mz8m8jz4tjrlgweilkgcba\n\nCopy that file into `.well-known/openpgpkey/hu` directory on your web server.\nIf you have SSH access to your server configured you can use `scp`:\n\n    scp ./sc8wrug2g3mz8m8jz4tjrlgweilkgcba example.com:/var/www/.well-known/openpgpkey/hu/\n\nI found that you do not need to enable directory listings for this well-known directory. To specify the [correct content type](https://tools.ietf.org/html/draft-koch-openpgp-webkey-service-00#section-3.1) with Apache, you can create a .htaccess file inside the `.well-known/openpgpkey/hu` directory with the following content:\n\n    <IfModule mod_mime.c>\n        ForceType application/pgp-key\n    </IfModule>\n\nThat will force all files within the directory to be served as `application/pgp-key`.\n\nThat's all you need to do.\n\nYou can test that it's working correctly:\n\n    gpg --no-default-keyring --keyring /tmp/gpg-$$ --auto-key-locate clear,wkd --locate-keys foo@example.com\n\nExample output:\n\n    gpg: key DEADBEEFCAFEBABE: public key \"Your Name\" imported\n    gpg: Total number processed: 1\n    gpg:               imported: 1\n    gpg: automatically retrieved 'foo@example.com' via WKD\n    ...\n\nYou can instruct users who wish to import your key to run the command:\n\n    gpg --auto-key-locate clear,wkd --locate-keys foo@example.com\n\nOr, to configure GPG to locate keys using wkd by placing this line in their `gpg.conf`:\n\n    auto-key-locate keyserver,dane,cert,pka,wkd,ldap,hkp://keys.gnupg.net\n\nNote - that's just an example, only the `wkd` option is relevant for this, but the other options are handy too.\n", "tags": ["gpg", "OpenPGP", "WKD", "tutorial"], "title": "Manual WKD setup", "isTrashed": false, "isStarred": false, "folder": "eaf2f7e1fc238535cd80", "updatedAt": "2018-04-20T09:29:32.710Z", "type": "MARKDOWN_NOTE", "createdAt": "2018-04-20T09:27:43.949Z"}, {"content": "# Essential Packages\n\n## Password Management\n\n**KeePassXC:**\n  * Password management\n  * Firefox-Integration\n  * SSH-Key-Integration\n\n## Instant Messaging\n\n  * Gajim\n  * Gajim-OMEMO\n  * Gajim-HTTPUpload\n\n## Email\n\n  * Thunderbird\n  * Enigmail\n  * TorBirdy\n\n## Anonymization\n\n  * Tor\n  * Tor-Browser\n\n## Directory encryption\n\n  * gocryptfs\n  * sshfs\n\n## Container encryption\n\n  * VeraCrypt\n\n## Skype alternative\n\n  * tox\n\n\n## FDE\n\n//TODO:\n\n", "tags": ["arcticalinux", "osdev"], "title": "Essential Packages", "isTrashed": false, "isStarred": false, "folder": "793521cf8d1bf04392e6", "updatedAt": "2018-04-23T07:23:43.769Z", "type": "MARKDOWN_NOTE", "createdAt": "2018-04-23T07:19:38.320Z"}, {"content": "# Open Source Licenses\n\n**GPL compatible licenses:**\n[Verschiedene Lizenzen und Kommentare - GNU-Projekt - Free Software Foundation](https://www.gnu.org/licenses/license-list.html#GPLCompatibleLicenses)\n\n", "tags": [], "title": "Open Source Licenses", "isTrashed": false, "isStarred": false, "folder": "c46806acbc0d231e6610", "updatedAt": "2018-05-07T06:09:21.242Z", "type": "MARKDOWN_NOTE", "createdAt": "2018-05-07T06:08:41.298Z"}, {"content": "# Ressources for Thunderbird addon development\n\n## Mozilla pages\n  * https://developer.mozilla.org/en-US/Add-ons/Thunderbird\n  * https://developer.mozilla.org/en-US/docs/Mozilla/Thunderbird/Thunderbird_API_documentation\n  * Thunderbird classes which can be used by addons:\n    * https://dxr.mozilla.org/comm-central/source/mailnews/base/public\n  * Source code of Thunderbird components:\n    * https://dxr.mozilla.org/comm-central/source/mail/components\n    \n\n## Collection of useful code snippets and guides\n#### Common\n  * http://mdn.beonex.com/en/Extensions/Thunderbird/HowTos.html\n    * old HowTo: https://developer.mozilla.org/en-US/Add-ons/Thunderbird/HowTos\n  * https://github.com/protz/thunderbird-stdlib\n  * https://developer.mozilla.org/en-US/Add-ons/Thunderbird/Finding_the_code_for_a_feature\n  \n#### get OS\nReturns OS as string e.g. \"WINNT\".\n\nComplete list at https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/Build_Instructions/OS_TARGET\n\n    function getOS() {\n      var { classes: Cc, interfaces: Ci, utils: Cu } = Components;\n      var xulRuntime = Cc[\"@mozilla.org/xre/app-info;1\"].getService(Ci.nsIXULRuntime);\n      return xulRuntime.OS;\n    }\n\n#### Working with files\n\nhttps://developer.mozilla.org/en-US/docs/Mozilla/JavaScript_code_modules/OSFile.jsm/OS.File_for_workers\n\n#### Adding a preferences menu\n\nhttps://developer.mozilla.org/en-US/docs/Adding_preferences_to_an_extension\n\n#### Accessing Attachments in compose window\n\nhttps://dxr.mozilla.org/comm-central/source/mail/components/compose/content/MsgComposeCommands.js#4620\n\n#### Install Addon without user interaction\n\n  * https://gist.github.com/eddiejaoude/0076739fe610189581d0\n  * http://bernaerts.dyndns.org/linux/74-ubuntu/271-ubuntu-firefox-thunderbird-addon-commandline\n  \n## Online Books\n\n  * https://de.scribd.com/document/4074097/RapidApplicationDevelopmentWithMozilla\n  \n\n\n## Guides\n  * Storage: SQLite & Memory-BLOB\n    * https://developer.mozilla.org/en-US/Add-ons/Thunderbird/HowTos/Common_Thunderbird_Extension_Techniques/Use_SQLite\n  * Calling native Libraries\n    * https://developer.mozilla.org/en-US/docs/Mozilla/js-ctypes\n    * Examples: https://developer.mozilla.org/en-US/docs/Mozilla/js-ctypes/Examples\n    * Basic Example: https://mar10.noblogs.org/post/2014/10/02/loading-a-native-library-in-firefox-via-the-add-ons-sdk/\n    * Complex Example: https://mar10.noblogs.org/post/2014/10/13/js-ctypes-from-c-to-javascript-to-c/\n    * Returning a String: http://stackoverflow.com/questions/30738818/js-ctypes-third-part-dll-with-string-return\n    * Casting Examples: https://gist.github.com/Noitidart/081ef49002a90fe43005\n    \n## Simple Addons\n  * Close Tab with Escape key\n    * https://addons.mozilla.org/de/thunderbird/addon/close-tab-on-esc/\n    \n## Useful things\n  * Open a new Tab and load a page inside\n  * Call native binaries\n  * Find native binaries on multiple platforms\n  * Get configured accounts in thunderbird\n  * Get the chrome-path for a file path\n  \n## TODOs\n  * Monterail-Addon (Preferences Menu, Working with files and directories)\n  * Contact-DB (HTML in Tab, Adding custom Button to Menu bar, SQLite3 usage)\n  * RSS-Reader\n  * Import certificates\n  \n    ", "tags": ["tb", "ressources"], "title": "Ressources for Thunderbird addon development", "isTrashed": false, "isStarred": false, "folder": "ce1d232699b99dfbebfb", "updatedAt": "2018-04-18T09:48:54.938Z", "type": "MARKDOWN_NOTE", "createdAt": "2018-04-18T09:48:35.928Z"}, {"content": "# Useful Ansible Ressources\n\n**wget & install debian packages:**\n[Install .deb Packages in Ansible](https://chaosmail.github.io/programming/2015/03/04/install-deb-packages-in-ansible/)\n\n**Workstation configuration example:**\n[GitHub - chaosmail/dev-env: Install and configure development environment with Ansible (Ubunu 14.04.2 LTS)](https://github.com/chaosmail/dev-env)\n\n", "tags": ["sysadmin", "devops", "ansible"], "title": "Useful Ansible Ressources", "isTrashed": false, "isStarred": false, "folder": "011825cbb91c6d9c89ea", "updatedAt": "2018-05-18T08:58:38.831Z", "type": "MARKDOWN_NOTE", "createdAt": "2018-05-18T08:56:04.926Z"}, {"snippets": [{"content": "", "name": "", "mode": "text"}], "description": "import Cert to TB", "title": "import Cert to TB", "isTrashed": false, "isStarred": false, "folder": "ce1d232699b99dfbebfb", "updatedAt": "2018-04-18T07:38:41.557Z", "type": "SNIPPET_NOTE", "createdAt": "2018-04-18T07:38:03.262Z", "tags": ["TB", "JS"]}, {"content": "# OpenSSL snippets\n\n## Create self-signed server certificate\n\n    openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -subj \"/C=US/ST=Oregon/L=Portland/O=Company Name/OU=Org/CN=www.example.com\"\n    \n## Convert certificate to der\n\n    openssl x509 -outform der -in certificate.pem -out certificate.der\n\n", "tags": ["sysadmin", "openssl", "cert"], "title": "OpenSSL snippets", "isTrashed": false, "isStarred": false, "folder": "011825cbb91c6d9c89ea", "updatedAt": "2018-04-18T10:25:20.453Z", "type": "MARKDOWN_NOTE", "createdAt": "2018-04-18T09:23:51.359Z"}, {"content": "# XMPP ressources\n\n\n# AgsXMPP\n  * Extension development\n    * https://forum.ag-software.net/thread/187-How-to-Create-Custom-packets\n  * PubSub\n    * https://forum.ag-software.net/thread/633-Help-with-PubSub-and-agsXmpp\n  * Writing extensions\n    * https://forum.ag-software.net/thread/187-How-to-Create-Custom-packets;?unb528sess=85e566a89258e1f8960060053a1fa055\n    \n# OMEMO\n\nhttps://xmpp.org/extensions/inbox/omemo.html#usecases-setup", "tags": ["xmpp", "mono", "omemo", "crypto", "agsxmpp"], "title": "XMPP ressources", "isTrashed": false, "isStarred": false, "folder": "6bff58b74433e038c223", "updatedAt": "2018-04-18T09:45:39.692Z", "type": "MARKDOWN_NOTE", "createdAt": "2018-04-18T09:44:50.898Z"}, {"snippets": [{"content": "// Filename:  Block.cs        \n// Author:    Benjamin N. Summerton <define-private-public>        \n// License:   Unlicense (http://unlicense.org/)      \n\nusing System;\nusing System.Text;\nusing System.Linq;\n\nnamespace UdpFileTransfer\n{\n    // These are the chunks of data that will be sent across the network\n    public class Block\n    {\n        public UInt32 Number { get; set; }\n        public byte[] Data { get; set; } = new byte[0];\n\n        #region Constructors\n        // Creates a new block of data w/ the supplied number\n        public Block(UInt32 number=0)\n        {\n            Number = number;\n        }\n\n        // Creates a Block from a byte array\n        public Block (byte[] bytes)\n        {\n            // First four bytes are the number\n            Number = BitConverter.ToUInt32(bytes, 0);\n\n            // Data starts at byte 4\n            Data = bytes.Skip(4).ToArray();\n        }\n        #endregion // Constructors\n\n        public override string ToString()\n        {\n            // Take some of the first few bits of data and turn that into a string\n            String dataStr;\n            if (Data.Length > 8)\n                dataStr = Encoding.ASCII.GetString(Data, 0, 8) + \"...\";\n            else\n                dataStr = Encoding.ASCII.GetString(Data, 0, Data.Length);\n\n            return string.Format(\n                \"[Block:\\n\" +\n                \"  Number={0},\\n\" +\n                \"  Size={1},\\n\" +\n                \"  Data=`{2}`]\",\n                Number, Data.Length, dataStr);\n        }\n\n        // Returns the data in the block as a byte array\n        public byte[] GetBytes()\n        {\n            // Convert meta-data\n            byte[] numberBytes = BitConverter.GetBytes(Number);\n\n            // Join all the data into one bigger array\n            byte[] bytes = new byte[numberBytes.Length + Data.Length];\n            numberBytes.CopyTo(bytes, 0);\n            Data.CopyTo(bytes, 4);\n\n            return bytes;\n        }\n    }\n}", "name": "Block.cs", "mode": "C#"}, {"content": " // Filename:  NetworkMessage.cs        \n// Author:    Benjamin N. Summerton <define-private-public>        \n// License:   Unlicense (http://unlicense.org/)      \n\nusing System.Net;\n\nnamespace UdpFileTransfer\n{\n    // This is a Simple datastructure that is used in packet queues\n    public class NetworkMessage\n    {\n        public IPEndPoint Sender { get; set; }\n        public Packet Packet { get; set; }\n    }\n}", "name": "NetworkMessage.cs", "mode": "C#"}, {"content": "// Filename:  Packet.cs        \n// Author:    Benjamin N. Summerton <define-private-public>        \n// License:   Unlicense (http://unlicense.org/)      \n\nusing System;\nusing System.Text;\nusing System.Linq;\n\nnamespace UdpFileTransfer\n{\n    public class Packet\n    {\n        #region Messge Types (Static)\n        public static UInt32 Ack = BitConverter.ToUInt32(Encoding.ASCII.GetBytes(\"ACK \"), 0);\n        public static UInt32 Bye = BitConverter.ToUInt32(Encoding.ASCII.GetBytes(\"BYE \"), 0);\n        public static UInt32 RequestFile = BitConverter.ToUInt32(Encoding.ASCII.GetBytes(\"REQF\"), 0);\n        public static UInt32 RequestBlock = BitConverter.ToUInt32(Encoding.ASCII.GetBytes(\"REQB\"), 0);\n        public static UInt32 Info = BitConverter.ToUInt32(Encoding.ASCII.GetBytes(\"INFO\"), 0);\n        public static UInt32 Send = BitConverter.ToUInt32(Encoding.ASCII.GetBytes(\"SEND\"), 0);\n        #endregion\n\n        // The Fields for the packet\n        public UInt32 PacketType { get; set; }\n        public byte[] Payload { get; set; } = new byte[0];\n\n        #region Handy Properties\n        public bool IsAck { get { return PacketType == Ack; } }\n        public bool IsBye { get { return PacketType == Bye; } }\n        public bool IsRequestFile { get { return PacketType == RequestFile; } }\n        public bool IsRequestBlock { get { return PacketType == RequestBlock; } }\n        public bool IsInfo { get { return PacketType == Info; } }\n        public bool IsSend { get { return PacketType == Send; } }\n        public bool IsUnknown { get { return !(IsAck || IsBye || IsRequestFile || IsRequestBlock || IsInfo || IsSend); } }\n\n        public string MessageTypeString { get { return Encoding.UTF8.GetString(BitConverter.GetBytes(PacketType)); } }\n        #endregion\n\n        #region Constructors\n        public Packet(UInt32 packetType)\n        {\n            // Set the message type\n            PacketType = packetType;\n        }\n\n        // Creates a Packet from a byte array\n        public Packet(byte[] bytes)\n        {\n            PacketType = BitConverter.ToUInt32(bytes, 0);      // Will grab the first four bytes (which are the type)\n\n            // Payload starts at byte 4\n            Payload = new byte[bytes.Length - 4];\n            bytes.Skip(4).ToArray().CopyTo(Payload, 0);\n        }\n        #endregion // Constructors\n\n        public override string ToString()\n        {\n            // Take some of the first few bits of data and turn that into a string\n            String payloadStr;\n            int payloadSize = Payload.Length;\n            if (payloadSize > 8)\n                payloadStr = Encoding.ASCII.GetString(Payload, 0, 8) + \"...\";\n            else\n                payloadStr = Encoding.ASCII.GetString(Payload, 0, payloadSize);\n\n            // type string\n            String typeStr = \"UKNOWN\";\n            if (!IsUnknown)\n                typeStr = MessageTypeString;\n            \n            return string.Format(\n                \"[Packet:\\n\" +\n                \"  Type={0},\\n\" +\n                \"  PayloadSize={1},\\n\" +\n                \"  Payload=`{2}`]\",\n                typeStr, payloadSize, payloadStr);\n        }\n\n\n        // Gets the Packet as a byte array\n        public byte[] GetBytes()\n        {\n            // Join the byte arrays\n            byte[] bytes = new byte[4 + Payload.Length];\n            BitConverter.GetBytes(PacketType).CopyTo(bytes, 0);\n            Payload.CopyTo(bytes, 4);\n\n            return bytes;\n        }\n    }\n\n    #region Definite Packets\n    // ACK\n    public class AckPacket : Packet\n    {\n        public string Message\n        {\n            get { return Encoding.UTF8.GetString(Payload); }\n            set { Payload = Encoding.UTF8.GetBytes(value); }\n        }\n\n        public AckPacket(Packet p=null) :\n            base(Ack)\n        {\n            if (p != null)\n                Payload = p.Payload;\n        }\n    }\n\n    // REQF\n    public class RequestFilePacket : Packet\n    {\n        public string Filename\n        {\n            get { return Encoding.UTF8.GetString(Payload); }\n            set { Payload = Encoding.UTF8.GetBytes(value); }\n        }\n\n        public RequestFilePacket(Packet p=null) :\n            base(RequestFile)\n        {\n            if (p != null)\n                Payload = p.Payload;\n        }\n\n    }\n\n    // REQB\n    public class RequestBlockPacket : Packet\n    {\n        public UInt32 Number\n        {\n            get { return BitConverter.ToUInt32(Payload, 0); }\n            set { Payload = BitConverter.GetBytes(value); }\n        }\n\n        public RequestBlockPacket(Packet p = null)\n            : base(RequestBlock)\n        {\n            if (p != null)\n                Payload = p.Payload;\n        }\n    }\n\n    // INFO\n    public class InfoPacket : Packet\n    {\n        // Should be an MD5 checksum\n        public byte[] Checksum\n        {\n            get { return Payload.Take(16).ToArray(); }\n            set { value.CopyTo(Payload, 0); }\n        }\n\n        public UInt32 FileSize\n        {\n            get { return BitConverter.ToUInt32(Payload.Skip(16).Take(4).ToArray(), 0); }\n            set { BitConverter.GetBytes(value).CopyTo(Payload, 16); }\n        }\n\n        public UInt32 MaxBlockSize\n        {\n            get { return BitConverter.ToUInt32(Payload.Skip(16 + 4).Take(4).ToArray(), 0); }\n            set { BitConverter.GetBytes(value).CopyTo(Payload, 16 + 4); }\n        }\n\n        public UInt32 BlockCount\n        {\n            get { return BitConverter.ToUInt32(Payload.Skip(16 + 4 + 4).Take(4).ToArray(), 0); }\n            set { BitConverter.GetBytes(value).CopyTo(Payload, 16 + 4 + 4); }\n        }\n\n        public InfoPacket(Packet p = null)\n            : base(Info)\n        {\n            if (p != null)\n                Payload = p.Payload;\n            else\n                Payload = new byte[16 + 4 + 4 + 4];\n        }\n    }\n\n    // SEND\n    public class SendPacket : Packet\n    {\n        public Block Block {\n            get { return new Block(Payload); }\n            set { Payload = value.GetBytes(); }\n        }\n\n        public SendPacket(Packet p=null)\n            : base(Send)\n        {\n            if (p != null)\n                Payload = p.Payload;\n        }\n    }\n    #endregion // Definite Packets\n}", "name": "Packet.cs", "mode": "C#"}, {"content": "// Filename:  UdpFileReceiver.cs        \n// Author:    Benjamin N. Summerton <define-private-public>        \n// License:   Unlicense (http://unlicense.org/)      \n\nusing System;\nusing System.Diagnostics;\nusing System.IO;\nusing System.IO.Compression;\nusing System.Text;\nusing System.Linq;\nusing System.Net;\nusing System.Net.Sockets;\nusing System.Threading;\nusing System.Collections.Generic;\nusing System.Security.Cryptography;\n\nnamespace UdpFileTransfer\n{\n    class UdpFileReceiver\n    {\n        #region Statics\n        public static readonly int MD5ChecksumByteSize = 16;\n        #endregion // Statics\n\n        enum ReceiverState {\n            NotRunning,\n            RequestingFile,\n            WaitingForRequestFileACK,\n            WaitingForInfo,\n            PreparingForTransfer,\n            Transfering,\n            TransferSuccessful,\n        }\n\n        // Connection data\n        private UdpClient _client;\n        public readonly int Port;\n        public readonly string Hostname;\n        private bool _shutdownRequested = false;\n        private bool _running = false;\n\n        // Receive Data\n        private Dictionary<UInt32, Block> _blocksReceived = new Dictionary<UInt32, Block>();\n        private Queue<UInt32> _blockRequestQueue = new Queue<UInt32>();\n        private Queue<NetworkMessage> _packetQueue = new Queue<NetworkMessage>();\n\n        // Other data\n        private MD5 _hasher;\n\n        // Constructor, sets up connection to <hostname> on <port>\n        public UdpFileReceiver(string hostname, int port)\n        {\n            Port = port;\n            Hostname = hostname;\n\n            // Sets a default client to send/receive packets with\n            _client = new UdpClient(Hostname, Port);    // will resolve DNS for us\n            _hasher = MD5.Create();\n        }\n\n        // Tries to perform a graceful shutdown\n        public void Shutdown()\n        {\n            _shutdownRequested = true;\n        }\n\n        // Tries to grab a file and download it to our local machine\n        public void GetFile(string filename)\n        {\n            // Init the get file state\n            Console.WriteLine(\"Requesting file: {0}\", filename);\n            ReceiverState state = ReceiverState.RequestingFile;\n            byte[] checksum = null;\n            UInt32 fileSize = 0;\n            UInt32 numBlocks = 0;\n            UInt32 totalRequestedBlocks = 0;\n            Stopwatch transferTimer = new Stopwatch();\n\n            // Small function to reset the transfer state\n            Action ResetTransferState = new Action(() =>\n                {\n                    state = ReceiverState.RequestingFile;\n                    checksum = null;\n                    fileSize = 0;\n                    numBlocks = 0;\n                    totalRequestedBlocks = 0;\n                    _blockRequestQueue.Clear();\n                    _blocksReceived.Clear();\n                    transferTimer.Reset();\n                });\n\n            // Main loop\n            _running = true;\n            bool senderQuit = false;\n            bool wasRunning = _running;\n            while (_running)\n            {\n                // Check for some new packets (if there are some)\n                _checkForNetworkMessages();\n                NetworkMessage nm = (_packetQueue.Count > 0) ? _packetQueue.Dequeue() : null;\n\n                // In case the sender is shutdown, quit\n                bool isBye = (nm == null) ? false : nm.Packet.IsBye;\n                if (isBye)\n                    senderQuit = true;\n                \n                // The state\n                switch (state)\n                {\n                    case ReceiverState.RequestingFile:\n                        // Create the REQF\n                        RequestFilePacket REQF = new RequestFilePacket();\n                        REQF.Filename = filename;\n\n                        // Send it\n                        byte[] buffer = REQF.GetBytes();\n                        _client.Send(buffer, buffer.Length);\n\n                        // Move the state to waiting for ACK\n                        state = ReceiverState.WaitingForRequestFileACK;\n                        break;\n\n                    case ReceiverState.WaitingForRequestFileACK:\n                        // If it is an ACK and the payload is the filename, we're good\n                        bool isAck = (nm == null) ? false : (nm.Packet.IsAck);\n                        if (isAck)\n                        {\n                            AckPacket ACK = new AckPacket(nm.Packet);\n\n                            // Make sure they respond with the filename\n                            if (ACK.Message == filename)\n                            {\n                                // They got it, shift the state\n                                state = ReceiverState.WaitingForInfo;\n                                Console.WriteLine(\"They have the file, waiting for INFO...\");\n                            }\n                            else\n                                ResetTransferState();   // Not what we wanted, reset\n                        }\n                        break;\n\n                    case ReceiverState.WaitingForInfo:\n                        // Verify it's file info\n                        bool isInfo = (nm == null) ? false : (nm.Packet.IsInfo);\n                        if (isInfo)\n                        {\n                            // Pull data\n                            InfoPacket INFO = new InfoPacket(nm.Packet);\n                            fileSize = INFO.FileSize;\n                            checksum = INFO.Checksum;\n                            numBlocks = INFO.BlockCount;\n\n                            // Allocate some client side resources\n                            Console.WriteLine(\"Received an INFO packet:\");\n                            Console.WriteLine(\"  Max block size: {0}\", INFO.MaxBlockSize);\n                            Console.WriteLine(\"  Num blocks: {0}\", INFO.BlockCount);\n\n                            // Send an ACK for the INFO\n                            AckPacket ACK = new AckPacket();\n                            ACK.Message = \"INFO\";\n                            buffer = ACK.GetBytes();\n                            _client.Send(buffer, buffer.Length);\n\n                            // Shift the state to ready\n                            state = ReceiverState.PreparingForTransfer;\n                        }\n                        break;\n\n                    case ReceiverState.PreparingForTransfer:\n                        // Prepare the request queue\n                        for (UInt32 id = 1; id <= numBlocks; id++)\n                            _blockRequestQueue.Enqueue(id);\n                        totalRequestedBlocks += numBlocks;\n\n                        // Shift the state\n                        Console.WriteLine(\"Starting Transfer...\");\n                        transferTimer.Start();\n                        state = ReceiverState.Transfering;\n                        break;\n\n                    case ReceiverState.Transfering:\n                        // Send a block request\n                        if (_blockRequestQueue.Count > 0)\n                        {\n                            // Setup a request for a Block\n                            UInt32 id = _blockRequestQueue.Dequeue();\n                            RequestBlockPacket REQB = new RequestBlockPacket();\n                            REQB.Number = id;\n\n                            // Send the Packet\n                            buffer = REQB.GetBytes();\n                            _client.Send(buffer, buffer.Length);\n\n                            // Some handy info\n                            Console.WriteLine(\"Sent request for Block #{0}\", id);\n                        }\n\n                        // Check if we have any blocks ourselves in the queue\n                        bool isSend = (nm == null) ? false : (nm.Packet.IsSend);\n                        if (isSend)\n                        {\n                            // Get the data (and save it\n                            SendPacket SEND = new SendPacket(nm.Packet);\n                            Block block = SEND.Block;\n                            _blocksReceived.Add(block.Number, block);\n\n                            // Print some info\n                            Console.WriteLine(\"Received Block #{0} [{1} bytes]\", block.Number, block.Data.Length);\n                        }\n\n                        // Requeue any requests that we haven't received\n                        if ((_blockRequestQueue.Count == 0) && (_blocksReceived.Count != numBlocks))\n                        {\n                            for (UInt32 id = 1; id <= numBlocks; id++)\n                            {\n                                if (!_blocksReceived.ContainsKey(id) && !_blockRequestQueue.Contains(id))\n                                {\n                                    _blockRequestQueue.Enqueue(id);\n                                    totalRequestedBlocks++;\n                                }\n                            }\n                        }\n\n                        // Did we get all the block we need?  Move to the \"transfer successful state.\"\n                        if (_blocksReceived.Count == numBlocks)\n                            state = ReceiverState.TransferSuccessful;\n                        break;\n\n                    case ReceiverState.TransferSuccessful:\n                        transferTimer.Stop();\n\n                        // Things were good, send a BYE message\n                        Packet BYE = new Packet(Packet.Bye);\n                        buffer = BYE.GetBytes();\n                        _client.Send(buffer, buffer.Length);\n\n                        Console.WriteLine(\"Transfer successful; it took {0:0.000}s with a success ratio of {1:0.000}.\",\n                            transferTimer.Elapsed.TotalSeconds, (double)numBlocks / (double)totalRequestedBlocks);\n                        Console.WriteLine(\"Decompressing the Blocks...\");\n\n                        // Reconstruct the data\n                        if (_saveBlocksToFile(filename, checksum, fileSize))\n                            Console.WriteLine(\"Saved file as {0}.\", filename);\n                        else\n                            Console.WriteLine(\"There was some trouble in saving the Blocks to {0}.\", filename);\n\n                        // And we're done here\n                        _running = false;\n                        break;\n\n                }\n\n                // Sleep\n                Thread.Sleep(1);\n\n                // Check for shutdown\n                _running &= !_shutdownRequested;\n                _running &= !senderQuit;\n            }\n\n            // Send a BYE message if the user wanted to cancel\n            if (_shutdownRequested && wasRunning)\n            {\n                Console.WriteLine(\"User canceled transfer.\");\n\n                Packet BYE = new Packet(Packet.Bye);\n                byte[] buffer = BYE.GetBytes();\n                _client.Send(buffer, buffer.Length);\n            }\n\n            // If the server told us to shutdown\n            if (senderQuit && wasRunning)\n                Console.WriteLine(\"The sender quit on us, canceling the transfer.\");\n\n            ResetTransferState();           // This also cleans up collections\n            _shutdownRequested = false;     // In case we shut down one download, but want to start a new one\n        }\n\n        public void Close()\n        {\n            _client.Close();\n        }\n\n        // Trys to fill the queue of packets\n        private void _checkForNetworkMessages()\n        {\n            if (!_running)\n                return;\n\n            // Check that there is something available (and at least four bytes for type)\n            int bytesAvailable = _client.Available;\n            if (bytesAvailable >= 4)\n            {\n                // This will read ONE datagram (even if multiple have been received)\n                IPEndPoint ep = new IPEndPoint(IPAddress.Any, 0);\n                byte[] buffer = _client.Receive(ref ep);\n                Packet p = new Packet(buffer);\n\n                // Create the message structure and queue it up for processing\n                NetworkMessage nm = new NetworkMessage();\n                nm.Sender = ep;\n                nm.Packet = p;\n                _packetQueue.Enqueue(nm);\n            }\n        }\n\n        // Trys to uncompress the blocks and save them to a file\n        private bool _saveBlocksToFile(string filename, byte[] networkChecksum, UInt32 fileSize)\n        {\n            bool good = false;\n\n            try\n            {\n                // Allocate some memory\n                int compressedByteSize = 0;\n                foreach (Block block in _blocksReceived.Values)\n                    compressedByteSize += block.Data.Length;\n                byte[] compressedBytes = new byte[compressedByteSize];\n\n                // Reconstruct into one big block\n                int cursor = 0;\n                for (UInt32 id = 1; id <= _blocksReceived.Keys.Count; id++)\n                {\n                    Block block = _blocksReceived[id];\n                    block.Data.CopyTo(compressedBytes, cursor);\n                    cursor += Convert.ToInt32(block.Data.Length);\n                }\n\n                // Now save it\n                using (MemoryStream uncompressedStream = new MemoryStream())\n                using (MemoryStream compressedStream = new MemoryStream(compressedBytes))\n                using (DeflateStream deflateStream = new DeflateStream(compressedStream, CompressionMode.Decompress))\n                {\n                    deflateStream.CopyTo(uncompressedStream);\n\n                    // Verify checksums\n                    uncompressedStream.Position = 0;\n                    byte[] checksum = _hasher.ComputeHash(uncompressedStream);\n                    if (!Enumerable.SequenceEqual(networkChecksum, checksum))\n                        throw new Exception(\"Checksum of uncompressed blocks doesn't match that of INFO packet.\");\n\n                    // Write it to the file\n                    uncompressedStream.Position = 0;\n                    using (FileStream fileStream = new FileStream(filename, FileMode.Create))\n                        uncompressedStream.CopyTo(fileStream);\n                }\n\n                good = true;\n            }\n            catch (Exception e)\n            {\n                // Crap...\n                Console.WriteLine(\"Could not save the blocks to \\\"{0}\\\", reason:\", filename);\n                Console.WriteLine(e.Message);\n            }\n\n            return good;\n        }\n\n\n\n\n\n        #region Program Execution\n        public static UdpFileReceiver fileReceiver;\n\n        public static void InterruptHandler(object sender, ConsoleCancelEventArgs args)\n        {\n            args.Cancel = true;\n            fileReceiver?.Shutdown();\n        }\n\n        public static void Main(string[] args)\n        {\n            // setup the receiver\n            string hostname = \"localhost\";//args[0].Trim();\n            int port = 6000;//int.Parse(args[1].Trim());\n            string filename = \"short_message.txt\";//args[2].Trim();\n            fileReceiver = new UdpFileReceiver(hostname, port);\n\n            // Add the Ctrl-C handler\n            Console.CancelKeyPress += InterruptHandler;\n\n            // Get a file\n            fileReceiver.GetFile(filename);\n            fileReceiver.Close();\n        }\n        #endregion // Program Execution\n    }\n}", "name": "UdpFileReceiver.cs", "mode": "C#"}, {"content": "// Filename:  UdpFileSender.cs        \n// Author:    Benjamin N. Summerton <define-private-public>        \n// License:   Unlicense (http://unlicense.org/)      \n\nusing System;\nusing System.Diagnostics;\nusing System.IO;\nusing System.IO.Compression;\nusing System.Text;\nusing System.Linq;\nusing System.Net;\nusing System.Net.Sockets;\nusing System.Threading;\nusing System.Collections.Generic;\nusing System.Security.Cryptography;\n\nnamespace UdpFileTransfer\n{\n    public class UdpFileSender\n    {\n        #region Statics\n        public static readonly UInt32 MaxBlockSize = 8 * 1024;   // 8KB\n        #endregion // Statics\n\n        enum SenderState\n        {\n            NotRunning,\n            WaitingForFileRequest,\n            PreparingFileForTransfer,\n            SendingFileInfo,\n            WaitingForInfoACK,\n            Transfering\n        }\n\n        // Connection data\n        private UdpClient _client;\n        public readonly int Port;\n        public bool Running { get; private set; } = false;\n\n        // Transfer data\n        public readonly string FilesDirectory;\n        private HashSet<string> _transferableFiles;\n        private Dictionary<UInt32, Block> _blocks = new Dictionary<UInt32, Block>();\n        private Queue<NetworkMessage> _packetQueue = new Queue<NetworkMessage>();\n\n        // Other stuff\n        private MD5 _hasher;\n\n        // Constructor, creates a UdpClient on <port>\n        public UdpFileSender(string filesDirectory, int port)\n        {\n            FilesDirectory = filesDirectory;\n            Port = port;\n            _client = new UdpClient(Port, AddressFamily.InterNetwork);      // Bind in IPv4\n            _hasher = MD5.Create();\n        }\n\n        // Prepares the Sender for file transfers\n        public void Init()\n        {\n            // Scan files (only the top directory)\n            List<string> files = new List<string>(Directory.EnumerateFiles(FilesDirectory));\n            _transferableFiles = new HashSet<string>(files.Select(s => s.Substring(FilesDirectory.Length + 1)));\n\n            // Make sure we have at least one to send\n            if (_transferableFiles.Count != 0)\n            {\n                // Modify the state\n                Running = true;\n\n                // Print info\n                Console.WriteLine(\"I'll transfer these files:\");\n                foreach (string s in _transferableFiles)\n                    Console.WriteLine(\"  {0}\", s);\n            }\n            else\n                Console.WriteLine(\"I don't have any files to transfer.\");\n        }\n\n        // signals for a (graceful) shutdown)\n        public void Shutdown()\n        {\n            Running = false;\n        }\n\n        // Main loop of the sender\n        public void Run()\n        {\n            // Transfer state\n            SenderState state = SenderState.WaitingForFileRequest;\n            string requestedFile = \"\";\n            IPEndPoint receiver = null;\n\n            // This is a handly little function to reset the transfer state\n            Action ResetTransferState = new Action(() =>\n                {\n                    state = SenderState.WaitingForFileRequest;\n                    requestedFile = \"\";\n                    receiver = null;\n                    _blocks.Clear();\n                });\n\n            while (Running)\n            {\n                // Check for some new messages\n                _checkForNetworkMessages();\n                NetworkMessage nm = (_packetQueue.Count > 0) ? _packetQueue.Dequeue() : null;\n\n                // Check to see if we have a BYE\n                bool isBye = (nm == null) ? false : nm.Packet.IsBye;\n                if (isBye)\n                {\n                    // Set back to the original state\n                    ResetTransferState();\n                    Console.WriteLine(\"Received a BYE message, waiting for next client.\");\n                }\n\n                // Do an action depending on the current state\n                switch (state)\n                {\n                    case SenderState.WaitingForFileRequest:\n                        // Check to see that we got a file request\n                        \n                        // If there was a packet, and it's a request file, send and ACK and switch the state\n                        bool isRequestFile = (nm == null) ? false : nm.Packet.IsRequestFile;\n                        if (isRequestFile)\n                        {\n                            // Prepare the ACK\n                            RequestFilePacket REQF = new RequestFilePacket(nm.Packet);\n                            AckPacket ACK = new AckPacket();\n                            requestedFile = REQF.Filename;\n\n                            // Print info\n                            Console.WriteLine(\"{0} has requested file file \\\"{1}\\\".\", nm.Sender, requestedFile);\n\n                            // Check that we have the file\n                            if (_transferableFiles.Contains(requestedFile))\n                            {\n                                // Mark that we have the file, save the sender as our current receiver\n                                receiver = nm.Sender;\n                                ACK.Message = requestedFile;\n                                state = SenderState.PreparingFileForTransfer;\n\n                                Console.WriteLine(\"  We have it.\");\n                            }\n                            else\n                                ResetTransferState();\n\n                            // Send the message\n                            byte[] buffer = ACK.GetBytes();\n                            _client.Send(buffer, buffer.Length, nm.Sender);\n                        }\n                        break;\n\n                    case SenderState.PreparingFileForTransfer:\n                        // Using the requested file, prepare it in memory\n                        byte[] checksum;\n                        UInt32 fileSize;\n                        if (_prepareFile(requestedFile, out checksum, out fileSize))\n                        {\n                            // It's good, send an info Packet\n                            InfoPacket INFO = new InfoPacket();\n                            INFO.Checksum = checksum;\n                            INFO.FileSize = fileSize;\n                            INFO.MaxBlockSize = MaxBlockSize;\n                            INFO.BlockCount = Convert.ToUInt32(_blocks.Count);\n\n                            // Send it\n                            byte[] buffer = INFO.GetBytes();\n                            _client.Send(buffer, buffer.Length, receiver);\n\n                            // Move the state\n                            Console.WriteLine(\"Sending INFO, waiting for ACK...\");\n                            state = SenderState.WaitingForInfoACK;\n                        }\n                        else\n                            ResetTransferState();   // File not good, reset the state\n                        break;\n\n                    case SenderState.WaitingForInfoACK:\n                        // If it is an ACK and the payload is the filename, we're good\n                        bool isAck = (nm == null) ? false : (nm.Packet.IsAck);\n                        if (isAck)\n                        {\n                            AckPacket ACK = new AckPacket(nm.Packet);\n                            if (ACK.Message == \"INFO\")\n                            {\n                                Console.WriteLine(\"Starting Transfer...\");\n                                state = SenderState.Transfering;\n                            }\n                        }\n                        break;\n\n                    case SenderState.Transfering:\n                        // If there is a block request, send it\n                        bool isRequestBlock = (nm == null) ? false : nm.Packet.IsRequestBlock;\n                        if (isRequestBlock)\n                        {\n                            // Pull out data\n                            RequestBlockPacket REQB = new RequestBlockPacket(nm.Packet);\n                            Console.WriteLine(\"Got request for Block #{0}\", REQB.Number);\n\n                            // Create the response packet\n                            Block block = _blocks[REQB.Number];\n                            SendPacket SEND = new SendPacket();\n                            SEND.Block = block;\n\n                            // Send it\n                            byte[] buffer = SEND.GetBytes();\n                            _client.Send(buffer, buffer.Length, nm.Sender);\n                            Console.WriteLine(\"Sent Block #{0} [{1} bytes]\", block.Number, block.Data.Length); \n                        }\n                        break;\n                }\n\n                Thread.Sleep(1);\n            }\n\n            // If there was a receiver set, that means we need to notify it to shutdown\n            if (receiver != null)\n            {\n                Packet BYE = new Packet(Packet.Bye);\n                byte[] buffer = BYE.GetBytes();\n                _client.Send(buffer, buffer.Length, receiver);\n            }\n\n            state = SenderState.NotRunning;\n        }\n\n        // Shutsdown the underlying UDP client\n        public void Close()\n        {\n            _client.Close();\n        }\n\n        // Trys to fill the queue of packets\n        private void _checkForNetworkMessages()\n        {\n            if (!Running)\n                return;\n\n            // Check that there is something available (and at least four bytes for type)\n            int bytesAvailable = _client.Available;\n            if (bytesAvailable >= 4)\n            {\n                // This will read ONE datagram (even if multiple have been received)\n                IPEndPoint ep = new IPEndPoint(IPAddress.Any, 0);\n                byte[] buffer = _client.Receive(ref ep);\n\n                // Create the message structure and queue it up for processing\n                NetworkMessage nm = new NetworkMessage();\n                nm.Sender = ep;\n                nm.Packet = new Packet(buffer);\n                _packetQueue.Enqueue(nm);\n            }\n        }\n\n        // Loads the file into the blocks, returns true if the requested file is ready\n        private bool _prepareFile(string requestedFile, out byte[] checksum, out UInt32 fileSize)\n        {\n            Console.WriteLine(\"Preparing the file to send...\");\n            bool good = false;\n            fileSize = 0;\n\n            try\n            {\n                // Read it in & compute a checksum of the original file\n                byte[] fileBytes = File.ReadAllBytes(Path.Combine(FilesDirectory, requestedFile));\n                checksum = _hasher.ComputeHash(fileBytes);\n                fileSize = Convert.ToUInt32(fileBytes.Length);\n                Console.WriteLine(\"{0} is {1} bytes large.\", requestedFile, fileSize);\n\n                // Compress it\n                Stopwatch timer = new Stopwatch();\n                using (MemoryStream compressedStream = new MemoryStream())\n                {\n                    // Perform the actual compression\n                    DeflateStream deflateStream = new DeflateStream(compressedStream, CompressionMode.Compress, true);\n                    timer.Start();\n                    deflateStream.Write(fileBytes, 0, fileBytes.Length);\n                    deflateStream.Close();\n                    timer.Stop();\n\n                    // Put it into blocks\n                    compressedStream.Position = 0;\n                    long compressedSize = compressedStream.Length;\n                    UInt32 id = 1;\n                    while (compressedStream.Position < compressedSize)\n                    {\n                        // Grab a chunk\n                        long numBytesLeft = compressedSize - compressedStream.Position;\n                        long allocationSize = (numBytesLeft > MaxBlockSize) ? MaxBlockSize : numBytesLeft;\n                        byte[] data = new byte[allocationSize];\n                        compressedStream.Read(data, 0, data.Length);\n\n                        // Create a new block\n                        Block b = new Block(id++);\n                        b.Data = data;\n                        _blocks.Add(b.Number, b);\n                    }\n\n                    // Print some info and say we're good\n                    Console.WriteLine(\"{0} compressed is {1} bytes large in {2:0.000}s.\", requestedFile, compressedSize, timer.Elapsed.TotalSeconds);\n                    Console.WriteLine(\"Sending the file in {0} blocks, using a max block size of {1} bytes.\", _blocks.Count, MaxBlockSize);\n                    good = true;\n                }\n            }\n            catch (Exception e)\n            {\n                // Crap...\n                Console.WriteLine(\"Could not prepare the file for transfer, reason:\");\n                Console.WriteLine(e.Message);\n\n                // Reset a few things\n                _blocks.Clear();\n                checksum = null;\n            }\n\n            return good;\n        }\n\n\n\n\n        #region Program Execution\n        public static UdpFileSender fileSender;\n\n        public static void InterruptHandler(object sender, ConsoleCancelEventArgs args)\n        {\n            args.Cancel = true;\n            fileSender?.Shutdown();\n        }\n\n        public static void Main(string[] args)\n        {\n            // Setup the sender\n            string filesDirectory = \"Files\";//args[0].Trim();\n            int port = 6000;//int.Parse(args[1].Trim());\n            fileSender = new UdpFileSender(filesDirectory, port);\n\n            // Add the Ctrl-C handler\n            Console.CancelKeyPress += InterruptHandler;\n\n            // Run it\n            fileSender.Init();\n            fileSender.Run();\n            fileSender.Close();\n        }\n        #endregion // Program Execution\n    }\n}", "name": "UdpFileSender.cs", "mode": "C#"}], "description": "UDP-based file transfer using mono", "title": "UDP-based file transfer using mono", "isTrashed": false, "isStarred": false, "folder": "6bff58b74433e038c223", "updatedAt": "2018-04-18T09:41:57.334Z", "type": "SNIPPET_NOTE", "createdAt": "2018-04-18T09:38:10.875Z", "tags": ["csharp", "udp", "filetransfer", "mono"]}, {"content": "# Gnupg headless key setup\n\n[Creating gpg keys non-interactively \u00b7 GitHub](https://gist.github.com/woods/8970150)", "tags": ["openpgp", "gnupg", "bash", "sysadmin"], "title": "Gnupg headless key setup", "isTrashed": false, "isStarred": false, "folder": "011825cbb91c6d9c89ea", "updatedAt": "2018-05-09T09:26:32.528Z", "type": "MARKDOWN_NOTE", "createdAt": "2018-05-09T09:25:59.763Z"}, {"content": "# Useful git links\n\n## snippets\n\n[Changing author info - User Documentation](https://help.github.com/articles/changing-author-info/)", "tags": ["git"], "title": "Useful git links", "isTrashed": false, "isStarred": false, "folder": "f4e6e478736ca64358d4", "updatedAt": "2018-04-18T10:38:49.668Z", "type": "MARKDOWN_NOTE", "createdAt": "2018-04-18T10:38:26.731Z"}, {"content": "# Create DIY Manjaro ISO\n\n## System setup\n\n    sudo pacman -Syu manjaro-tools\n    \nInstall packages 1-6. \n\n## Modifying a manjaro ISO\n### Change wallpaper\n\nOpen\n\n    /home/<username>/.config/xfce4/xfconf/xfce-perchannel-xml/xfce4-desktop.xml\nand change all paths to your custom wallpaper.\nExample:\n\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n     <channel name=\"xfce4-desktop\" version=\"1.0\">\n       <property name=\"backdrop\" type=\"empty\">\n         <property name=\"screen0\" type=\"empty\">\n           <property name=\"monitor0\" type=\"empty\">\n             <property name=\"image-path\" type=\"string\" value=\"'''/usr/share/backgrounds/<YOUR IMAGE HERE>'''\"/>\n             <property name=\"last-image\" type=\"string\" value=\"'''/usr/share/backgrounds/<YOUR IMAGE HERE>'''\"/>\n             <property name=\"last-single-image\" type=\"string\" value=\"'''/usr/share/backgrounds/<YOUR IMAGE HERE>'''\"/>\n             <property name=\"image-style\" type=\"int\" value=\"5\"/>\n           </property>\n           <property name=\"monitorVGA-0\" type=\"empty\">\n             <property name=\"workspace0\" type=\"empty\">\n               <property name=\"color-style\" type=\"int\" value=\"0\"/>\n               <property name=\"image-style\" type=\"int\" value=\"5\"/>\n               <property name=\"last-image\" type=\"string\" value=\"'''/usr/share/backgrounds/<YOUR IMAGE HERE>'''\"/>\n             </property>\n             <property name=\"workspace1\" type=\"empty\">\n               <property name=\"color-style\" type=\"int\" value=\"0\"/>\n               <property name=\"image-style\" type=\"int\" value=\"5\"/>\n               <property name=\"last-image\" type=\"string\" value=\"'''/usr/share/backgrounds/<YOUR IMAGE HERE>'''\"/>\n             </property>\n           </property>\n         </property>\n       </property>\n       <property name=\"desktop-icons\" type=\"empty\">\n         <property name=\"style\" type=\"int\" value=\"2\"/>\n         <property name=\"file-icons\" type=\"empty\">\n           <property name=\"show-removable\" type=\"bool\" value=\"true\"/>\n         </property>\n         <property name=\"icon-size\" type=\"uint\" value=\"32\"/>\n       </property>\n     </channel>\n \nCreate the directories for the following path:\n\n    /usr/share/manjaro-tools/iso-profiles/manjaro/xfce/desktop-overlay/usr/share/backgrounds/\n\n**Copy your wallpaper to this directory**\n\nCreate the following directory:\n\n    /usr/share/manjaro-tools/iso-profiles/manjaro/xfce/desktop-overlay/etc/skel/.config\n    \nCopy the directory:\n\n    /home/<username>/.config/xfce4\nto\n\n    /usr/share/manjaro-tools/iso-profiles/manjaro/xfce/desktop-overlay/etc/skel/.config/xfce4\n    \n\n### Adding and removing Manjaro packages\n\nAdd your packages to the following file or remove packages you do not want to be installes:\n\n    /usr/share/manjaro-tools/iso-profiles/manjaro/xfce/Packages-Desktop\n    \n**Search for package:**\n  * Arch/Manjaro packages: https://www.archlinux.org/packages/\n  * AUR packages: https://aur.archlinux.org/packages/\n    * For AUR packages you need to add the repo to user-repos.conf\n    \n### Adding AUR packages\nCreate user-repos.conf at:\n\n    /usr/share/manjaro-tools/iso-profiles/manjaro/xfce/user-repos.conf\n\n### Creating own repository\n\n  * Manual Repo build:\n    * https://wiki.manjaro.org/index.php?title=Buildiso_with_AUR_packages:_Using_buildpkg\n  * Repo Manager\n    * https://gist.github.com/nebulak/fcb9c53bb3f857a5710d7b2c01ea9fae\n\n#### Additional ressources:\n\n  * https://forum.manjaro.org/t/how-to-create-your-own-manjaro-spin-with-manjaro-tools/1355\n  * https://wiki.manjaro.org/index.php?title=Build_Manjaro_ISOs_with_buildiso\n  * How to setup own package repo:\n    * https://github.com/EnigmaCurry/arch-ppa\n", "tags": ["arcticalinux", "osdev"], "title": "Create DIY Manjaro ISO", "isTrashed": false, "isStarred": false, "folder": "793521cf8d1bf04392e6", "updatedAt": "2018-04-18T09:43:57.974Z", "type": "MARKDOWN_NOTE", "createdAt": "2018-04-18T09:30:28.743Z"}, {"content": "# Docker Ressources\n\n[MySQL Docker Containers: Understanding the basics | Severalnines](https://severalnines.com/blog/mysql-docker-containers-understanding-basics)\n\n[Baking Your Docker Images With Ansible - Maestrano Blog](https://blog.maestrano.com/baking-your-docker-images-with-ansible/)", "tags": ["docker", "tutorial"], "title": "Docker Ressources", "isTrashed": false, "isStarred": false, "folder": "8bcb4aebf09dbf33139f", "updatedAt": "2018-04-18T09:07:59.533Z", "type": "MARKDOWN_NOTE", "createdAt": "2018-04-18T09:06:22.987Z"}, {"content": "# Python Email Ressources\n## IMAP-related\n  * Using UIDs: https://stackoverflow.com/questions/3775667/how-to-get-message-id-using-imaplib\n  * Delete Messages: https://stackoverflow.com/questions/3180891/imap-deleting-messages\n  * Autocomplete: https://stackoverflow.com/a/7821956/7486276\n  * Qt System Tray: https://stackoverflow.com/questions/893984/pyqt-show-menu-in-a-system-tray-application\n  * Parse HTML to Text: \n    * https://stackoverflow.com/questions/17641490/how-to-parse-html-from-email-body-python\n    * https://www.crummy.com/software/BeautifulSoup/bs4/doc/\n  * Parse Mime:\n    * https://stackoverflow.com/questions/17874360/python-how-to-parse-the-body-from-a-raw-email-given-that-raw-email-does-not\n    * (http://www.magiksys.net/pyzmail/)\n  * Parse Email-adresses: TODO...\n\n### Autodiscover Mailserver\n\n  * https://serverfault.com/questions/814715/is-there-a-standard-dns-record-to-indicate-the-imap-server-for-a-domain\n  * https://github.com/rthalley/dnspython\n  * https://developer.mozilla.org/en-US/docs/Mozilla/Thunderbird/Autoconfiguration\n  * check for imap.example.com/smtp.example.com\n\n### OpenPGP integration\n\n  * https://www.saltycrane.com/blog/2011/10/python-gnupg-gpg-example/\n\n### Autocrypt integration\n  * https://py-autocrypt.readthedocs.io/en/latest/api.html#\n\n### IMAPLib Tutorials\n  \n  * https://yuji.wordpress.com/2011/06/22/python-imaplib-imap-example-with-gmail/\n  \n## SMTP related\n\n  * https://docs.python.org/3/library/smtplib.html\n  * http://naelshiab.com/tutorial-send-email-python/", "tags": ["tutorial", "python", "email", "imap", "ressources"], "title": "Python Email Ressources", "isTrashed": false, "isStarred": false, "folder": "1f4ca2e02de793f62302", "updatedAt": "2018-04-18T09:17:49.864Z", "type": "MARKDOWN_NOTE", "createdAt": "2018-04-18T09:16:48.577Z"}, {"content": "# Awesome Docker Containers \n\n# VoIP: Kamailio\n  * https://dopensource.com/2016/05/11/running-kamailio-in-a-docker-container/\n\n# Mailserver\n\n  * [crankdevde / docker_mailserver \u2014 Bitbucket](https://bitbucket.org/crankdevde/docker_mailserver)", "tags": ["docker", "voip", "kamailio"], "title": "Awesome Docker Containers", "isTrashed": false, "isStarred": false, "folder": "8bcb4aebf09dbf33139f", "updatedAt": "2018-04-18T09:05:56.070Z", "type": "MARKDOWN_NOTE", "createdAt": "2018-04-18T09:03:34.445Z"}, {"content": "# OpenSSL Self-Signed S/MIME Certs with OpenSSL \n\n**source:** [Issue Your Own Self-Signed S/MIME Certs with OpenSSL \u00b7 GitHub](https://gist.github.com/richieforeman/3166387)\n\n### makeauthority.sh\n\n    # Run this once\n    openssl genrsa -des3 -out ca.key 4096\n    openssl req -new -x509 -days 365 -key ca.key -out ca.crt\n\n### makecert.sh\n\n    # Run this for each email account.  The system must install the CA cert and the resulting p12 file in order to be happy.\n\n    # Borrowed from http://serverfault.com/questions/103263/can-i-create-my-own-s-mime-certificate-for-email-encryption\n\n    openssl genrsa -des3 -out smime.key 4096\n    openssl req -new -key smime.key -out smime.csr\n    openssl x509 -req -days 365 -in smime.csr -CA ca.crt -CAkey ca.key -set_serial 1 -out smime.crt -setalias \"Self Signed SMIME\" -addtrust emailProtection -addreject clientAuth -addreject serverAuth -trustout\n    openssl pkcs12 -export -in smime.crt -inkey smime.key -out smime.p12", "tags": ["openssl", "sysadmin", "smime", "ca"], "title": "OpenSSL Self-Signed S/MIME Certs with OpenSSL", "isTrashed": false, "isStarred": false, "folder": "011825cbb91c6d9c89ea", "updatedAt": "2018-04-18T10:27:43.747Z", "type": "MARKDOWN_NOTE", "createdAt": "2018-04-18T10:25:24.999Z"}, {"content": "# Cross platform snippets\n\n**Detecting OS:** http://mono.wikia.com/wiki/Detecting_the_execution_platform\n\n**Get Environment Variables:** https://stackoverflow.com/questions/867485/c-sharp-getting-the-path-of-appdata", "tags": ["mono", "ressources", "crossplatform"], "title": "Cross platform snippets", "isTrashed": false, "isStarred": false, "folder": "6bff58b74433e038c223", "updatedAt": "2018-04-18T09:37:42.754Z", "type": "MARKDOWN_NOTE", "createdAt": "2018-04-18T09:36:58.739Z"}, {"content": "# Bash snippets\n\n**Search string in files:**\n\n    grep -r \"string to be searched\"  /path/to/dir\n\n\n**Replace string in file:**\n\n    sed 's/oldstring.*/newstring/' /some/file/some/where.txt\n\n\n### Useful libraries\n\n**Shell script loader:** \n[linux - Bash: How _best_ to include other scripts? - Stack Overflow](https://stackoverflow.com/questions/192292/bash-how-best-to-include-other-scripts/3692080#3692080)\n[Overview | Shell Script Loader](https://loader.sourceforge.io/overview/)", "tags": ["sysadmin", "bash"], "title": "Bash snippets", "isTrashed": false, "isStarred": false, "folder": "011825cbb91c6d9c89ea", "updatedAt": "2018-05-07T10:02:47.083Z", "type": "MARKDOWN_NOTE", "createdAt": "2018-04-27T08:27:01.915Z"}, {"content": "\n# My Atom setup\n\n## Useful base packages\n**[docblockr](https://atom.io/packages/docblockr)**: For easy creation of **DocBlocks** and **DocStrings**\n\n    apm install docblockr\n\n**[minimap](https://atom.io/packages/minimap)**: Overview of current file with a **minimap**\n\n    apm install minimap\n\n**[git-plus](https://atom.io/packages/git-plus)**: Shortcuts for git commands\n\n    apm install git-plus\n    \n**[merge-conflicts](https://atom.io/packages/merge-conflicts)**: Easily merge conflicts when working together.\n\n    apm install merge-conflicts\n    \n**[file-icons](https://atom.io/packages/file-icons)**: File icons for different file types\n    \n    apm install file-icons\n\n## Python specific\n\n### Python linter & autocompletion\n#### PIP\n\n    sudo pip install flake8\n    sudo pip install flake8-docstrings\n\n#### Atom packages\n    apm install linter-flake8\n    apm install linter-ui-default\n    apm install intentions\n    apm install busy-signal\n    apm install autocomplete-python\n    \nAdd the following line to your atom init script:\n\n    process.env.PATH = ['/usr/local/bin/', process.env.PATH].join(':')\n    \n\n## CSS specific\n\n**[Pigments](https://atom.io/packages/pigments)**: Shows colors in CSS files\n    \n    apm install pigments\n\n\n## Collaboration\n\n**[Teletype](https://atom.io/packages/teletype)**: Collaborative P2P typing\n\n    apm install teletype\n\n**[Easy to use Atom Markdown setup](https://www.news47ell.com/how-to/atom-best-markdown-editor-mac/)\n\n\n## For backup\n\n**[config-import-export](https://atom.io/packages/config-import-export):** To backup your atom configuration\n\n## //TODO:\n  * https://atom.io/packages/terminal-plus\n  * https://atom.io/packages/imdone-atom\n", "tags": ["devenv", "atom"], "title": "My Atom setup", "isTrashed": false, "isStarred": false, "folder": "00f84f63205d821f8357", "updatedAt": "2018-04-18T09:51:28.163Z", "type": "MARKDOWN_NOTE", "createdAt": "2018-04-18T09:50:59.039Z"}, {"content": "# GNU sed to Create, Edit & manipulate files\n\nLFCS-Part 1\n[LFCS: How to use GNU 'sed' Command to Create, Edit, and Manipulate files in Linux - Part 1](https://www.tecmint.com/sed-command-to-create-edit-and-manipulate-files-in-linux/)\n\n## Operators:\n\n**Redirection operator:**\nOutput of command is redirected to file instead of stdout on terminal.\n\n    command > file\n\n\n**Pipeline operator:**\nThe output of command1 is given to command2\n\n    command1 | command2\n\n**Additional links:**\n[Linux Tutorial - 11. Learn Piping and Redirection](https://ryanstutorials.net/linuxtutorial/piping.php)\n\n## Using sed\n\n", "tags": ["lfcs", "bash", "sysadmin"], "title": "GNU sed to Create, Edit & manipulate files", "isTrashed": false, "isStarred": false, "folder": "011825cbb91c6d9c89ea", "updatedAt": "2018-04-30T07:34:03.945Z", "type": "MARKDOWN_NOTE", "createdAt": "2018-04-30T07:23:20.100Z"}]